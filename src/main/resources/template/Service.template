package com.cloudoer.${project}.${module}.service;

import com.cloudoer.${project}.core.exception.BizException;
import com.cloudoer.${project}.${module}.model.dto.${EntityName}DTO;
import com.cloudoer.${project}.${module}.model.entity.${EntityName};
import com.cloudoer.framework.domain.PagingContext;
import com.cloudoer.framework.domain.SortingContext;

import java.util.List;
import java.util.Map;
import java.util.Vector;

/**
 * @author ${author}
 * @version ${version}
 * @since ${date}
 */
public interface ${EntityName}Service {

    /**
     * 保存一条 ${EntityName} 数据。
     *
     * @param ${entityName} 待保存的数据。
     * @throws BizException 保存失败异常。
     */
    void save${EntityName}(${EntityName} ${entityName}) throws BizException;

    /**
     * 保存多条 ${EntityName} 数据。
     *
     * @param ${entityName}List 待保存的数据列表。
     * @throws BizException 保存失败异常。
     */
    void save${EntityName}List(List<${EntityName}> ${entityName}List) throws BizException;

    /**
     * 根据id更新 ${EntityName}，字段为null的选项会把数据库字段更新为null，即全部更新。
     *
     * @param ${entityName} 更新的目标数据。
     */
    void update${EntityName}(${EntityName} ${entityName});

    /**
     * 根据Id部分更新实体 ${EntityName}。
     *
     * @param dataMap 需要更新的键值对。
     * @param conditionMap where语句后的条件筛选的键值对。
     */
    void update${EntityName}Selective(Map<String, Object> dataMap, Map<String, Object> conditionMap);

    /**
     * 根据id逻辑删除一条 ${EntityName}。
     *
     * @param id 数据id。
     * @param userId 删除人的id。
     * @throws BizException 逻辑删除异常。
     */
    void logicDelete${EntityName}(Long id, Long userId) throws BizException;

    /**
     * 根据id物理删除一条 ${EntityName}。
     *
     * @param id 数据唯一id。
     * @throws BizException 物理删除异常。
     */
    void delete${EntityName}(Long id) throws BizException;

    /**
     * 根据id查询一条 ${EntityName}。
     *
     * @param id 数据唯一id。
     * @return 查询到的 ${EntityName} 数据。
     */
    ${EntityName}DTO find${EntityName}ById(Long id);

    /**
     * 根据条件查询得到第一条 ${EntityName}。
     *
     * @param params 查询条件
     * @return 符合条件的一个 ${EntityName}。
     */
    ${EntityName}DTO findOne${EntityName}(Map<String, Object> params);

    /**
     * 根据查询条件得到数据列表，包含分页和排序信息。
     *
     * @param params 查询条件。
     * @param scs 排序信息。
     * @param pc 分页信息。
     * @return 查询结果的数据集合。
     */
    List<${EntityName}DTO> find(Map<String, Object> params, Vector<SortingContext> scs, PagingContext pc);

    /**
     * 根据查询条件得到指定字段集合的数据列表，包含分页和排序信息。
     *
     * @param params 查询条件。
     * @param columns 需要查询的字段信息。
     * @param scs 排序信息。
     * @param pc 分页信息。
     * @throws BizException 查询异常。
     * @return 查询结果的数据集合。
     */
    List<Map> findMap(Map<String, Object> params, Vector<SortingContext> scs,
                          PagingContext pc, String... columns) throws BizException;

    /**
     * 统计符合条件的数据条数。
     *
     * @param params 统计的过滤条件。
     * @return 统计结果。
     */
    int count(Map<String, Object> params);
}