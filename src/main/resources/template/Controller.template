package com.cloudoer.${project}.${module}.controller;

import com.cloudoer.${project}.core.controller.BaseController;
import com.cloudoer.${project}.core.exception.BizException;
import com.cloudoer.${project}.${module}.model.dto.${EntityName}DTO;
import com.cloudoer.${project}.${module}.model.entity.${EntityName};
import com.cloudoer.${project}.${module}.service.${EntityName}Service;
import com.cloudoer.${project}.core.utils.BeanUtil;
import com.cloudoer.framework.domain.PagingContext;
import com.cloudoer.framework.domain.SortingContext;
import com.cloudoer.web.common.RO;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.*;

/**
 * @author ${author}
 * @version ${version}
 * @since ${date}
 */
@RestController
@RequestMapping("/${ControllerMapping}")
@Slf4j
@Api("${tableComment}")
public class ${EntityName}Controller extends BaseController<${EntityName}> {

    private final ${EntityName}Service ${entityName}Service;

    @Autowired
    public ${EntityName}Controller(${EntityName}Service ${entityName}Service) {
        this.${entityName}Service = ${entityName}Service;
    }

    @ApiOperation(value = "根据条件查询${EntityName}列表", notes = "包含查询条件，分页以及排序功能")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "s", value = "每页的条数", paramType = "query"),
            @ApiImplicitParam(name = "p", value = "请球的页码", paramType = "query"),
            @ApiImplicitParam(name = "sc", value = "排序字段，格式：scs=name(asc),sc=age(desc),有序", paramType = "query"),
            })
    @GetMapping(name = "${module}-${tableComment}管理")
    public Object list(HttpServletRequest request, ${EntityName}DTO ${entityName}DTO) {
        log.info("list:{}", ${entityName}DTO);

        Map<String, Object> params = getConditionsMap(request);
        List<${EntityName}DTO> list = new ArrayList<>();
        int total = ${entityName}Service.count(params);
        PagingContext pc = getPagingContext(request, total);
        Vector<SortingContext> scs = getSortingContext(request);
        if (total > 0) {
            list = ${entityName}Service.find(params, scs, pc);
            list.forEach(${EntityName}DTO::computeIntegrality);
        }
        return RO.build(RO.RC_SUCCESS, "成功", list, pc, scs);
    }

    @ApiOperation(value = "查询${EntityName}", notes = "根据ID查询${EntityName}")
    @ApiImplicitParam(name = "id", value = "主键id", dataType = "Long", paramType = "path", required = true)
    @GetMapping(value = "/{id}", name = "查看")
    public Object view(@PathVariable("id") Long id) {
        log.info("get ${entityName} Id:{}", id);
        ${EntityName}DTO ${entityName}DTO = ${entityName}Service.find${EntityName}ById(id);
        if(null != ${entityName}DTO) {
            ${entityName}DTO.computeIntegrality();
        }
        return RO.build(RO.RC_SUCCESS, "成功", ${entityName}DTO);
    }

    @ApiOperation(value = "新增${EntityName}", notes = "新增一条${EntityName}记录")
    @PostMapping(name = "创建")
    public Object create(@RequestBody ${EntityName}DTO ${entityName}DTO, HttpServletRequest request) {
        log.info("add ${entityName} DTO:{}", ${entityName}DTO);

        ${EntityName} source${EntityName} = new ${EntityName}();
        try {
            ${EntityName} ${entityName} = BeanUtil.copyProperties(${entityName}DTO, source${EntityName});
            ${entityName}Service.save${EntityName}(this.packAddBaseProps(${entityName}, request));
        } catch (BizException e) {
            log.error("add ${entityName} failed,  ${entityName}DTO: {}, error message:{}", ${entityName}DTO, e.getMessage());
            return RO.build(RO.RC_FAIL, "失败", e.getMessage());
        }
        return RO.ok();
    }

    @ApiOperation(value = "修改${EntityName}", notes = "根据ID, 修改一条${EntityName}记录")
    @ApiImplicitParam(name = "id", value = "主键id", dataType = "Long", paramType = "path", required = true)
    @PutMapping(value = "/{id}", name = "修改")
    public Object update(@PathVariable("id") Long id, @RequestBody ${EntityName}DTO ${entityName}DTO, HttpServletRequest request) {
        log.info("put modify id:{}, ${entityName} DTO:{}", id, ${entityName}DTO);

        ${EntityName} ${entityName} = new ${EntityName}();
        ${entityName}.setId(id);
        ${entityName}Service.update${EntityName}(this.packModifyBaseProps(BeanUtil.copyProperties(${entityName}DTO, ${entityName}), request));
        return RO.ok();
    }

    @ApiOperation(value = "修改${EntityName}", notes = "根据ID, 部分修改一条${EntityName}记录")
    @ApiImplicitParam(name = "id", value = "主键ID", dataType = "Long", paramType = "path", required = true)
    @PatchMapping(value = "/{id}", name = "修改指定项")
    public Object updatex(@PathVariable("id") Long id, HttpServletRequest request, @RequestBody Map<String, Object> params) {
        log.info("Patch modify ${EntityName} Id:{}", id);
        params.put("modified_by", getUserId(request));
        params.put("modified_date", System.currentTimeMillis());

        Map<String, Object> conditions = new HashMap<>(1);
        conditions.put("id", id);
        ${entityName}Service.update${EntityName}Selective(params, conditions);
        return RO.ok();
    }

    @ApiOperation(value = "删除${EntityName}", notes = "根据ID, 逻辑删除一条${EntityName}记录")
    @ApiImplicitParam(name = "id", value = "主键id", dataType = "Long", paramType = "path", required = true)
    @DeleteMapping(value = "/{id}", name = "删除")
    public Object remove(HttpServletRequest request, @PathVariable("id") Long id) {
        log.info("delete ${entityName}, id:{}", id);

        try {
            ${entityName}Service.logicDelete${EntityName}(id, this.getUserId(request));
        } catch (BizException e) {
            log.error("delete failed, ${entityName} id: {}, error message:{}", id, e.getMessage());
            return RO.build(RO.RC_FAIL, "失败", e.getMessage());
        }
        return RO.ok();
    }

    @ApiOperation(value = "计算指定字段的和", notes = "用sum函数计算符合条件记录的指定字段的和。")
    @ApiImplicitParam(name = "sumField", value = "求和的字段", dataType = "String", paramType = "path", required = true)
    @GetMapping("/sum/{sumField}")
    public Object sum(@PathVariable String sumField, HttpServletRequest request) {
        Map<String, Object> params = getConditionsMap(request);
        Double sum = ${entityName}Service.sum(sumField, params);
        return RO.build(RO.RC_SUCCESS, "操作成功", sum);
    }

    @ApiOperation(value = "按照指定字段分组并计算指定字段的和", notes = "根据指定的字段分组，然后用sum函数计算符合条件记录指定字段的和。")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "sumField", value = "计算字段", dataType = "String", paramType = "path", required = true),
            @ApiImplicitParam(name = "groupField", value = "分组字段", dataType = "String", paramType = "path", required = true)
    })
    @GetMapping("/group/sum/{groupField}/{sumField}")
    public Object groupSum(@PathVariable String groupField, @PathVariable String sumField, HttpServletRequest request) {
        Map<String, Object> params = getConditionsMap(request);
        Map<String, Double> result = ${entityName}Service.groupSum(groupField, sumField, params);
        return RO.build(RO.RC_SUCCESS, "操作成功", result);
    }

    @ApiOperation(value = "按照指定字段分组计算指定字段的数目", notes = "根据指定的字段，用count函数计算符合条件记录字段的数目。")
    @ApiImplicitParam(name = "groupField", value = "分组的字段", dataType = "String", paramType = "path", required = true)
    @GetMapping("/group/count/{groupField}")
    public Object groupCount(@PathVariable String groupField, HttpServletRequest request) {
        Map<String, Object> params = getConditionsMap(request);
        Map<String, Integer> result = ${entityName}Service.groupCount(groupField, params);
        return RO.build(RO.RC_SUCCESS, "操作成功", result);
    }
}
