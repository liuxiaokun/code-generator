package com.cloudoer.${project}.${module}.model.entity;

import com.cloudoer.${project}.${module}.config.LongDateSerializer;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import lombok.Data;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.HashSet;
import java.util.Set;

/**
 * @author ${author}
 * @version ${version}
 * @since ${date}
 */
@Data
public class BaseEntity implements Serializable{

    /**
     * 数据库表的主键, 生成策略基于雪花算法
     * 获取示例：<code>AppContext.IdGen.nextId()</>
     */
    private Long id;

    /**
     * 创建人ID，对应 t_user表的id.
     * 获取示例：<code>BaseController#getUserId(request)</code>
     */
    private Long createdBy;

    /**
     * 创建时间，存储时间戳。
     * 获取示例：<code>System.currentTimeMillis()</code>
     */
    @JsonSerialize(using = LongDateSerializer.class)
    private Long createdDate;

    /**
     * 最后修改人ID，对应t_user表的id。
     * 获取示例：<code>BaseController#getUserId(request)</code>
     */
    private Long modifiedBy;

    /**
     * 最后修改时间，存储时间戳。
     * 获取示例：<code>System.currentTimeMillis()</code>
     */
    @JsonSerialize(using = LongDateSerializer.class)
    private Long modifiedDate;

    /**
     * 此记录的状态，例如逻辑删除
     * 示例：1：正常：0：删除 等等。
     */
    private Integer status;

    /**
     * 数据最后编辑人的ip地址。
     */
    private String ip;

    private String integrality;

    /**
     * 计算不为<code>null</code>的字段在总字段中的百分比，即数据完整度。
     * @return 数据完整度，0~1.
     */
    public String computeIntegrality() {
        Set<String> basicFieldSet = new HashSet<>();
        basicFieldSet.add("id");
        basicFieldSet.add("createdBy");
        basicFieldSet.add("createdDate");
        basicFieldSet.add("modifiedBy");
        basicFieldSet.add("modifiedDate");
        basicFieldSet.add("status");
        basicFieldSet.add("ip");
        if (!this.getClass().getSuperclass().getName().endsWith("BaseEntity")) {
            return "0";
        }
        Field[] fields = this.getClass().getDeclaredFields();
        double all = 0;
        double notNull = 0;

        for (Field field : fields) {
            String fieldName = field.getName();
            if (basicFieldSet.contains(fieldName)) {
                continue;
            }
            field.setAccessible(true);
            all++;

            try {
                Object fieldObject = field.get(this);
                if (null != fieldObject) {
                    notNull++;
                }
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
        if (Double.compare(all, 0) == 0) {
            return "0";
        } else {
            double ratio = notNull / all;
            String result = String.format("%.2f", ratio);
            this.setIntegrality(result);
            return result;
        }
    }
}
